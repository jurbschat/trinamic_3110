/*----- PROTECTED REGION ID(TMCM_IO.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        TMCM_IO.cpp
//
// description : C++ source for the TMCM_IO class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TMCM_IO are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TMCM_IO.h>
#include <TMCM_IOClass.h>
#include "../tangohelpers.h"

/*----- PROTECTED REGION END -----*/	//	TMCM_IO.cpp

/**
 *  TMCM_IO class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//  Value  |  Tango::DevULong	Scalar
//================================================================

namespace TMCM_IO_ns
{
/*----- PROTECTED REGION ID(TMCM_IO::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	TMCM_IO::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : TMCM_IO::TMCM_IO()
 *	Description : Constructors for a Tango device
 *                implementing the classTMCM_IO
 */
//--------------------------------------------------------
TMCM_IO::TMCM_IO(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(TMCM_IO::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::constructor_1
}
//--------------------------------------------------------
TMCM_IO::TMCM_IO(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(TMCM_IO::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::constructor_2
}
//--------------------------------------------------------
TMCM_IO::TMCM_IO(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(TMCM_IO::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_IO::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void TMCM_IO::delete_device()
{
	DEBUG_STREAM << "TMCM_IO::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_IO::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::delete_device
	delete[] attr_Value_read;
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_IO::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void TMCM_IO::init_device()
{
	DEBUG_STREAM << "TMCM_IO::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_IO::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Value_read = new Tango::DevULong[1];
	/*----- PROTECTED REGION ID(TMCM_IO::init_device) ENABLED START -----*/

	*attr_Value_read = 0xFFFFFFFF;
	ioID = -1;

	using tpl_type = std::tuple<bool, int32_t, int32_t, std::vector<int32_t>, uint8_t>;
	static const std::map<std::string, tpl_type> portOptions = {
		{"OUT", { true,  0, 1,    std::vector<int32_t>({0, 1, 2, 3, 4, 5, 6, 7}), 2 } }, // 3 and 7 are high current outputs (1 A)
		{"IN",  { false, 0, 1,    std::vector<int32_t>({1, 2, 3, 5, 6, 7}),       0 } },
		{"AIN", { false, 0, 4096, std::vector<int32_t>({0, 4}),                   1 } }
	};

	bool optionFound = false;
	std::vector<int32_t> valid;
	for(auto& option : portOptions) {
		auto it = portName.find(option.first);
		if(it == 0) {
			isOutput = std::get<0>(option.second);
			valid = std::get<3>(option.second);
			bankID = std::get<4>(option.second);
			optionFound = true;
			break;
		}
	}
	if(!optionFound) {
		auto error = fmt::format("{} is not a valid port name as it does not start with 'OUT', 'IN' or 'AIN'. see port property description", portName);
		Tango::Except::throw_exception("invalid bank", error.c_str(), "TMCM_IO::init_device");
	}

	// read first number ignore invalid characters (e.g. AIN/OUT/IN)
	std::stringstream ss;
	ss << portName;
	ss >> ioID;
	if(std::find(valid.begin(), valid.end(), ioID) == valid.end()) {
		auto error = fmt::format("'{}' is not a valid portName index. see port property description", ioID);
		Tango::Except::throw_exception("invalid bank", error.c_str(), "TMCM_IO::init_device");
	}

	ci = TMCM::GetCore().GetInterface().get();
	if(ci) {
		ChangeState(Tango::ON);
	} else {
		ChangeState(Tango::FAULT, "unable to get serial interface (error on global device?)");
	}

	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::init_device
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_IO::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void TMCM_IO::get_device_property()
{
	/*----- PROTECTED REGION ID(TMCM_IO::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("moduleId"));
	dev_prop.push_back(Tango::DbDatum("portName"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on TMCM_IOClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		TMCM_IOClass	*ds_class =
			(static_cast<TMCM_IOClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize moduleId from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  moduleId;
		else {
			//	Try to initialize moduleId from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  moduleId;
		}
		//	And try to extract moduleId value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  moduleId;

		//	Try to initialize portName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  portName;
		else {
			//	Try to initialize portName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  portName;
		}
		//	And try to extract portName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  portName;

	}

	/*----- PROTECTED REGION ID(TMCM_IO::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_IO::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void TMCM_IO::always_executed_hook()
{
	DEBUG_STREAM << "TMCM_IO::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_IO::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_IO::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void TMCM_IO::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TMCM_IO::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_IO::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : TMCM_IO::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void TMCM_IO::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TMCM_IO::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_IO::write_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Value related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_IO::read_Value(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_IO::read_Value(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_IO::read_Value) ENABLED START -----*/
	//	Set the attribute value

	*attr_Value_read = ReadInput(TMCM::Module(moduleId), TMCM::IO(ioID), TMCM::Bank(bankID));
	attr.set_value(attr_Value_read);

	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::read_Value
}
//--------------------------------------------------------
/**
 *	Write attribute Value related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_IO::write_Value(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_IO::write_Value(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_IO::write_Value) ENABLED START -----*/

	if(isOutput) {
		Tango::DevULong output = std::min(w_val, 1u);
		WriteOutput(static_cast<bool>(output));
	}

	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::write_Value
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_IO::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void TMCM_IO::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(TMCM_IO::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_IO::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void TMCM_IO::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(TMCM_IO::add_dynamic_commands) ENABLED START -----*/

	//	Add your own code to create and add dynamic commands if any

	/*----- PROTECTED REGION END -----*/	//	TMCM_IO::add_dynamic_commands
}

/*----- PROTECTED REGION ID(TMCM_IO::namespace_ending) ENABLED START -----*/

int8_t TMCM_IO::ReadInput(TMCM::Module module, TMCM::IO io, TMCM::Bank bank) {
	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetInput(module, io, bank));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to input, error: {}", response.GetStatus()); } )) {
				return -1;
			}
			return response.PayloadAsInt();
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
}

void TMCM_IO::WriteOutput(bool value) {
	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::SetOutput(TMCM::Module(moduleId), TMCM::IO(ioID), value));
			ValidateResponse(response, [response](){ return fmt::format("unable to write acceleration, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
}

void TMCM_IO::ChangeState(Tango::DevState newState, const std::string& str)
{
	set_state(newState);
	set_status(str.empty() ? Tango::StatusNotSet : str);
}

/*----- PROTECTED REGION END -----*/	//	TMCM_IO::namespace_ending
} //	namespace
