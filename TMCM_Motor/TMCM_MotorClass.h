/*----- PROTECTED REGION ID(TMCM_MotorClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        TMCM_MotorClass.h
//
// description : Include for the TMCM_Motor root class.
//               This class is the singleton class for
//                the TMCM_Motor device class.
//               It contains all properties and methods which the 
//               TMCM_Motor requires only once e.g. the commands.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TMCM_MotorClass_H
#define TMCM_MotorClass_H

#include <tango.h>
#include <TMCM_Motor.h>


/*----- PROTECTED REGION END -----*/	//	TMCM_MotorClass.h


namespace TMCM_Motor_ns
{
/*----- PROTECTED REGION ID(TMCM_MotorClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	TMCM_MotorClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute Position class definition
class PositionAttrib: public Tango::Attr
{
public:
	PositionAttrib():Attr("Position",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~PositionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_Position(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_Position(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_Position_allowed(ty);}
};

//	Attribute Velocity class definition
class VelocityAttrib: public Tango::Attr
{
public:
	VelocityAttrib():Attr("Velocity",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~VelocityAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_Velocity(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_Velocity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_Velocity_allowed(ty);}
};

//	Attribute Acceleration class definition
class AccelerationAttrib: public Tango::Attr
{
public:
	AccelerationAttrib():Attr("Acceleration",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~AccelerationAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_Acceleration(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_Acceleration(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_Acceleration_allowed(ty);}
};

//	Attribute RunCurrent class definition
class RunCurrentAttrib: public Tango::Attr
{
public:
	RunCurrentAttrib():Attr("RunCurrent",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~RunCurrentAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_RunCurrent(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_RunCurrent(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_RunCurrent_allowed(ty);}
};

//	Attribute HoldCurrent class definition
class HoldCurrentAttrib: public Tango::Attr
{
public:
	HoldCurrentAttrib():Attr("HoldCurrent",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~HoldCurrentAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_HoldCurrent(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_HoldCurrent(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_HoldCurrent_allowed(ty);}
};

//	Attribute InvertDirection class definition
class InvertDirectionAttrib: public Tango::Attr
{
public:
	InvertDirectionAttrib():Attr("InvertDirection",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~InvertDirectionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_InvertDirection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_InvertDirection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_InvertDirection_allowed(ty);}
};

//	Attribute SoftLimitEnable class definition
class SoftLimitEnableAttrib: public Tango::Attr
{
public:
	SoftLimitEnableAttrib():Attr("SoftLimitEnable",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~SoftLimitEnableAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_SoftLimitEnable(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_SoftLimitEnable(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_SoftLimitEnable_allowed(ty);}
};

//	Attribute SoftCwLimit class definition
class SoftCwLimitAttrib: public Tango::Attr
{
public:
	SoftCwLimitAttrib():Attr("SoftCwLimit",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~SoftCwLimitAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_SoftCwLimit(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_SoftCwLimit(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_SoftCwLimit_allowed(ty);}
};

//	Attribute SoftCcwLimit class definition
class SoftCcwLimitAttrib: public Tango::Attr
{
public:
	SoftCcwLimitAttrib():Attr("SoftCcwLimit",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~SoftCcwLimitAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_SoftCcwLimit(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_SoftCcwLimit(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_SoftCcwLimit_allowed(ty);}
};

//	Attribute SoftCwLimitFault class definition
class SoftCwLimitFaultAttrib: public Tango::Attr
{
public:
	SoftCwLimitFaultAttrib():Attr("SoftCwLimitFault",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~SoftCwLimitFaultAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_SoftCwLimitFault(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_SoftCwLimitFault_allowed(ty);}
};

//	Attribute SoftCcwLimitFault class definition
class SoftCcwLimitFaultAttrib: public Tango::Attr
{
public:
	SoftCcwLimitFaultAttrib():Attr("SoftCcwLimitFault",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~SoftCcwLimitFaultAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_SoftCcwLimitFault(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_SoftCcwLimitFault_allowed(ty);}
};

//	Attribute HomeOffset class definition
class HomeOffsetAttrib: public Tango::Attr
{
public:
	HomeOffsetAttrib():Attr("HomeOffset",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~HomeOffsetAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_HomeOffset(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_HomeOffset(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_HomeOffset_allowed(ty);}
};

//	Attribute CwLimitFault class definition
class CwLimitFaultAttrib: public Tango::Attr
{
public:
	CwLimitFaultAttrib():Attr("CwLimitFault",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~CwLimitFaultAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_CwLimitFault(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_CwLimitFault_allowed(ty);}
};

//	Attribute CcwLimitFault class definition
class CcwLimitFaultAttrib: public Tango::Attr
{
public:
	CcwLimitFaultAttrib():Attr("CcwLimitFault",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~CcwLimitFaultAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_CcwLimitFault(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_CcwLimitFault_allowed(ty);}
};

//	Attribute Microsteps class definition
class MicrostepsAttrib: public Tango::Attr
{
public:
	MicrostepsAttrib():Attr("Microsteps",
			Tango::DEV_ENUM, Tango::READ_WRITE) {};
	~MicrostepsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_Microsteps(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_Microsteps(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_Microsteps_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(MicrostepsEnum) == in_type;}
	virtual string get_enum_type() {return string("MicrostepsEnum");}
};

//	Attribute RampDivisor class definition
class RampDivisorAttrib: public Tango::Attr
{
public:
	RampDivisorAttrib():Attr("RampDivisor",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~RampDivisorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_RampDivisor(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_RampDivisor(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_RampDivisor_allowed(ty);}
};

//	Attribute PulseDivisor class definition
class PulseDivisorAttrib: public Tango::Attr
{
public:
	PulseDivisorAttrib():Attr("PulseDivisor",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~PulseDivisorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_PulseDivisor(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_PulseDivisor(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_PulseDivisor_allowed(ty);}
};

//	Attribute StepInterpolation class definition
class StepInterpolationAttrib: public Tango::Attr
{
public:
	StepInterpolationAttrib():Attr("StepInterpolation",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~StepInterpolationAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_StepInterpolation(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_StepInterpolation(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_StepInterpolation_allowed(ty);}
};

//	Attribute FreeWheeling class definition
class FreeWheelingAttrib: public Tango::Attr
{
public:
	FreeWheelingAttrib():Attr("FreeWheeling",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~FreeWheelingAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TMCM_Motor *>(dev))->read_FreeWheeling(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TMCM_Motor *>(dev))->write_FreeWheeling(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TMCM_Motor *>(dev))->is_FreeWheeling_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Stop class definition
class StopClass : public Tango::Command
{
public:
	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TMCM_Motor *>(dev))->is_Stop_allowed(any);}
};

//	Command ClearAlarm class definition
class ClearAlarmClass : public Tango::Command
{
public:
	ClearAlarmClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ClearAlarmClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ClearAlarmClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TMCM_Motor *>(dev))->is_ClearAlarm_allowed(any);}
};

//	Command Calibrate class definition
class CalibrateClass : public Tango::Command
{
public:
	CalibrateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	CalibrateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~CalibrateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TMCM_Motor *>(dev))->is_Calibrate_allowed(any);}
};

//	Command Home class definition
class HomeClass : public Tango::Command
{
public:
	HomeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	HomeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~HomeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TMCM_Motor *>(dev))->is_Home_allowed(any);}
};


/**
 *	The TMCM_MotorClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  TMCM_MotorClass : public Tango::DeviceClass
#else
class TMCM_MotorClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(TMCM_MotorClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_MotorClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static TMCM_MotorClass *init(const char *);
		static TMCM_MotorClass *instance();
		~TMCM_MotorClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		TMCM_MotorClass(string &);
		static TMCM_MotorClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	TMCM_Motor_H
