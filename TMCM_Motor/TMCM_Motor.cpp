/*----- PROTECTED REGION ID(TMCM_Motor.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        TMCM_Motor.cpp
//
// description : C++ source for the TMCM_Motor class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TMCM_Motor are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TMCM_Motor.h>
#include <TMCM_MotorClass.h>
#include <fmt/format.h>
#include "../core/core.h"
#include "../tangohelpers.h"

/*----- PROTECTED REGION END -----*/	//	TMCM_Motor.cpp

/**
 *  TMCM_Motor class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  Inherited (no method)
//  Stop          |  stop
//  ClearAlarm    |  clear_alarm
//  Calibrate     |  calibrate
//  Home          |  home
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Position           |  Tango::DevDouble	Scalar
//  Velocity           |  Tango::DevDouble	Scalar
//  Acceleration       |  Tango::DevDouble	Scalar
//  RunCurrent         |  Tango::DevDouble	Scalar
//  HoldCurrent        |  Tango::DevDouble	Scalar
//  InvertDirection    |  Tango::DevBoolean	Scalar
//  SoftLimitEnable    |  Tango::DevBoolean	Scalar
//  SoftCwLimit        |  Tango::DevDouble	Scalar
//  SoftCcwLimit       |  Tango::DevDouble	Scalar
//  SoftCwLimitFault   |  Tango::DevBoolean	Scalar
//  SoftCcwLimitFault  |  Tango::DevBoolean	Scalar
//  HomeOffset         |  Tango::DevDouble	Scalar
//  CwLimitFault       |  Tango::DevBoolean	Scalar
//  CcwLimitFault      |  Tango::DevBoolean	Scalar
//  Microsteps         |  Tango::DevEnum	Scalar
//  RampDivisor        |  Tango::DevULong	Scalar
//  PulseDivisor       |  Tango::DevULong	Scalar
//  StepInterpolation  |  Tango::DevBoolean	Scalar
//  FreeWheeling       |  Tango::DevULong	Scalar
//================================================================

namespace TMCM_Motor_ns
{
/*----- PROTECTED REGION ID(TMCM_Motor::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : TMCM_Motor::TMCM_Motor()
 *	Description : Constructors for a Tango device
 *                implementing the classTMCM_Motor
 */
//--------------------------------------------------------
TMCM_Motor::TMCM_Motor(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(TMCM_Motor::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::constructor_1
}
//--------------------------------------------------------
TMCM_Motor::TMCM_Motor(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(TMCM_Motor::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::constructor_2
}
//--------------------------------------------------------
TMCM_Motor::TMCM_Motor(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(TMCM_Motor::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_Motor::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void TMCM_Motor::delete_device()
{
	DEBUG_STREAM << "TMCM_Motor::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::delete_device
	delete[] attr_Position_read;
	delete[] attr_Velocity_read;
	delete[] attr_Acceleration_read;
	delete[] attr_RunCurrent_read;
	delete[] attr_HoldCurrent_read;
	delete[] attr_InvertDirection_read;
	delete[] attr_SoftLimitEnable_read;
	delete[] attr_SoftCwLimit_read;
	delete[] attr_SoftCcwLimit_read;
	delete[] attr_SoftCwLimitFault_read;
	delete[] attr_SoftCcwLimitFault_read;
	delete[] attr_HomeOffset_read;
	delete[] attr_CwLimitFault_read;
	delete[] attr_CcwLimitFault_read;
	delete[] attr_Microsteps_read;
	delete[] attr_RampDivisor_read;
	delete[] attr_PulseDivisor_read;
	delete[] attr_StepInterpolation_read;
	delete[] attr_FreeWheeling_read;
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_Motor::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void TMCM_Motor::init_device()
{
	DEBUG_STREAM << "TMCM_Motor::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Position_read = new Tango::DevDouble[1];
	attr_Velocity_read = new Tango::DevDouble[1];
	attr_Acceleration_read = new Tango::DevDouble[1];
	attr_RunCurrent_read = new Tango::DevDouble[1];
	attr_HoldCurrent_read = new Tango::DevDouble[1];
	attr_InvertDirection_read = new Tango::DevBoolean[1];
	attr_SoftLimitEnable_read = new Tango::DevBoolean[1];
	attr_SoftCwLimit_read = new Tango::DevDouble[1];
	attr_SoftCcwLimit_read = new Tango::DevDouble[1];
	attr_SoftCwLimitFault_read = new Tango::DevBoolean[1];
	attr_SoftCcwLimitFault_read = new Tango::DevBoolean[1];
	attr_HomeOffset_read = new Tango::DevDouble[1];
	attr_CwLimitFault_read = new Tango::DevBoolean[1];
	attr_CcwLimitFault_read = new Tango::DevBoolean[1];
	attr_Microsteps_read = new MicrostepsEnum[1];
	attr_RampDivisor_read = new Tango::DevULong[1];
	attr_PulseDivisor_read = new Tango::DevULong[1];
	attr_StepInterpolation_read = new Tango::DevBoolean[1];
	attr_FreeWheeling_read = new Tango::DevULong[1];
	/*----- PROTECTED REGION ID(TMCM_Motor::init_device) ENABLED START -----*/
	
	//	Initialize device
	ci = TMCM::GetCore().GetInterface().get();
	if(ci) {
		ChangeState(Tango::ON);
	} else {
		ChangeState(Tango::FAULT, "unable to get serial interface (error on global device?)");
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::init_device
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_Motor::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void TMCM_Motor::get_device_property()
{
	/*----- PROTECTED REGION ID(TMCM_Motor::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("moduleId"));
	dev_prop.push_back(Tango::DbDatum("motorId"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on TMCM_MotorClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		TMCM_MotorClass	*ds_class =
			(static_cast<TMCM_MotorClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize moduleId from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  moduleId;
		else {
			//	Try to initialize moduleId from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  moduleId;
		}
		//	And try to extract moduleId value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  moduleId;

		//	Try to initialize motorId from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  motorId;
		else {
			//	Try to initialize motorId from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  motorId;
		}
		//	And try to extract motorId value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  motorId;

	}

	/*----- PROTECTED REGION ID(TMCM_Motor::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_Motor::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void TMCM_Motor::always_executed_hook()
{
	DEBUG_STREAM << "TMCM_Motor::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_Motor::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void TMCM_Motor::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TMCM_Motor::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : TMCM_Motor::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void TMCM_Motor::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TMCM_Motor::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Position related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_Position(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_Position(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_Position) ENABLED START -----*/
	//	Set the attribute value
	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::ActualPosition, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read position, error: {}", response.GetStatus()); } )) {
				return;
			}
			Tango::DevDouble pos = response.PayloadAsInt();
			attr.set_value(&pos);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_Position
}
//--------------------------------------------------------
/**
 *	Write attribute Position related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_Position(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_Position(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_Position) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::MoveToPosition(TMCM::Module(moduleId), TMCM::Motor(motorId), int32_t(w_val)));
			ValidateResponse(response, [&response](){ return fmt::format("unable to write position, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_Position
}
//--------------------------------------------------------
/**
 *	Read attribute Velocity related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_Velocity(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_Velocity(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_Velocity) ENABLED START -----*/
	//	Set the attribute value
	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::MaxSpeed, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read velocity, error: {}", response.GetStatus()); } )) {
				return;
			}
			Tango::DevDouble pos = response.PayloadAsInt();
			attr.set_value(&pos);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_Velocity
}
//--------------------------------------------------------
/**
 *	Write attribute Velocity related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_Velocity(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_Velocity(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_Velocity) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::SetAxisParemater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::MaxSpeed, TMCM::Motor(motorId), int32_t(w_val)));
			ValidateResponse(response, [&response](){ return fmt::format("unable to write velocity, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_Velocity
}
//--------------------------------------------------------
/**
 *	Read attribute Acceleration related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_Acceleration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_Acceleration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_Acceleration) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::MaxAcceleration, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read acceleration, error: {}", response.GetStatus()); } )) {
				return;
			}
			Tango::DevDouble pos = response.PayloadAsInt();
			attr.set_value(&pos);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_Acceleration
}
//--------------------------------------------------------
/**
 *	Write attribute Acceleration related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_Acceleration(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_Acceleration(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_Acceleration) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::SetAxisParemater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::MaxAcceleration, TMCM::Motor(motorId), int32_t(w_val)));
			ValidateResponse(response, [response](){ return fmt::format("unable to write acceleration, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_Acceleration
}
//--------------------------------------------------------
/**
 *	Read attribute RunCurrent related method
 *	Description: run current
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_RunCurrent(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_RunCurrent(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_RunCurrent) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::MaxCurrent, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read run current, error: {}", response.GetStatus()); } )) {
				return;
			}
			int32_t value = response.PayloadAsInt();
			// value is in the range of 0-2.992 and divided into 32 steps. see hardware manual p. 22
			Tango::DevDouble rc = (value - 0) / (255 - 0) * (2.992 - 0.093) + 0.093;
			attr.set_value(&rc);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_RunCurrent
}
//--------------------------------------------------------
/**
 *	Write attribute RunCurrent related method
 *	Description: run current
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_RunCurrent(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_RunCurrent(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_RunCurrent) ENABLED START -----*/

	try {
		if(ci) {
			w_val = std::min(3., std::max(w_val, 0.));
			Tango::DevDouble rc = (w_val - 0) / (3 - 0) * (255 - 0) + 0;
			auto response = ci->writeRead(TMCM::Builder::SetAxisParemater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::MaxCurrent, TMCM::Motor(motorId), int32_t(rc)));
			ValidateResponse(response, [&response](){ return fmt::format("unable to write run current, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_RunCurrent
}
//--------------------------------------------------------
/**
 *	Read attribute HoldCurrent related method
 *	Description: hold current if no move is in action
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_HoldCurrent(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_HoldCurrent(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_HoldCurrent) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::StandbyCurrent, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read hold current, error: {}", response.GetStatus()); } )) {
				return;
			}
			int32_t value = response.PayloadAsInt();
			// value is in the range of 0-2.992 and divided into 32 steps. see hardware manual p. 22
			Tango::DevDouble rc = (value - 0) / (255 - 0) * (2.992 - 0.093) + 0.093;
			attr.set_value(&rc);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_HoldCurrent
}
//--------------------------------------------------------
/**
 *	Write attribute HoldCurrent related method
 *	Description: hold current if no move is in action
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_HoldCurrent(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_HoldCurrent(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_HoldCurrent) ENABLED START -----*/

	try {
		if(ci) {
			w_val = std::min(3., std::max(w_val, 0.));
			Tango::DevDouble rc = (w_val - 0) / (3 - 0) * (255 - 0) + 0;
			auto response = ci->writeRead(TMCM::Builder::SetAxisParemater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::StandbyCurrent, TMCM::Motor(motorId), int32_t(rc)));
			ValidateResponse(response, [&response](){ return fmt::format("unable to write hold current, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_HoldCurrent
}
//--------------------------------------------------------
/**
 *	Read attribute InvertDirection related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_InvertDirection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_InvertDirection(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_InvertDirection) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_InvertDirection_read);

	//TODO: can we simply invert the move command signs?
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_InvertDirection
}
//--------------------------------------------------------
/**
 *	Write attribute InvertDirection related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_InvertDirection(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_InvertDirection(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_InvertDirection) ENABLED START -----*/

	//TODO: can we simply invert the move command signs?
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_InvertDirection
}
//--------------------------------------------------------
/**
 *	Read attribute SoftLimitEnable related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_SoftLimitEnable(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_SoftLimitEnable(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_SoftLimitEnable) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SoftLimitEnable_read);
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_SoftLimitEnable
}
//--------------------------------------------------------
/**
 *	Write attribute SoftLimitEnable related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_SoftLimitEnable(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_SoftLimitEnable(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_SoftLimitEnable) ENABLED START -----*/

	*attr_SoftCwLimit_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_SoftLimitEnable
}
//--------------------------------------------------------
/**
 *	Read attribute SoftCwLimit related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_SoftCwLimit(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_SoftCwLimit(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_SoftCwLimit) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SoftCwLimit_read);
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_SoftCwLimit
}
//--------------------------------------------------------
/**
 *	Write attribute SoftCwLimit related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_SoftCwLimit(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_SoftCwLimit(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_SoftCwLimit) ENABLED START -----*/

	*attr_SoftCcwLimit_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_SoftCwLimit
}
//--------------------------------------------------------
/**
 *	Read attribute SoftCcwLimit related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_SoftCcwLimit(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_SoftCcwLimit(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_SoftCcwLimit) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SoftCcwLimit_read);
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_SoftCcwLimit
}
//--------------------------------------------------------
/**
 *	Write attribute SoftCcwLimit related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_SoftCcwLimit(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_SoftCcwLimit(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_SoftCcwLimit) ENABLED START -----*/

	*attr_SoftCcwLimit_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_SoftCcwLimit
}
//--------------------------------------------------------
/**
 *	Read attribute SoftCwLimitFault related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_SoftCwLimitFault(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_SoftCwLimitFault(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_SoftCwLimitFault) ENABLED START -----*/

	//TODO: read position and check against limit
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_SoftCwLimitFault
}
//--------------------------------------------------------
/**
 *	Read attribute SoftCcwLimitFault related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_SoftCcwLimitFault(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_SoftCcwLimitFault(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_SoftCcwLimitFault) ENABLED START -----*/

	//TODO: read position and check against limit
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_SoftCcwLimitFault
}
//--------------------------------------------------------
/**
 *	Read attribute HomeOffset related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_HomeOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_HomeOffset(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_HomeOffset) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_HomeOffset_read);
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_HomeOffset
}
//--------------------------------------------------------
/**
 *	Write attribute HomeOffset related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_HomeOffset(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_HomeOffset(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_HomeOffset) ENABLED START -----*/

	*attr_HomeOffset_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_HomeOffset
}
//--------------------------------------------------------
/**
 *	Read attribute CwLimitFault related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_CwLimitFault(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_CwLimitFault(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_CwLimitFault) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::RightLimitSwitch, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read right limit switch, error: {}", response.GetStatus()); } )) {
				return;
			}
			Tango::DevBoolean rc = response.PayloadAsInt();
			attr.set_value(&rc);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_CwLimitFault
}
//--------------------------------------------------------
/**
 *	Read attribute CcwLimitFault related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_CcwLimitFault(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_CcwLimitFault(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_CcwLimitFault) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::LeftLimitSwitch, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read left limit switch, error: {}", response.GetStatus()); } )) {
				return;
			}
			Tango::DevBoolean rc = response.PayloadAsInt();
			attr.set_value(&rc);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}

	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_CcwLimitFault
}
//--------------------------------------------------------
/**
 *	Read attribute Microsteps related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (MicrostepsEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_Microsteps(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_Microsteps(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_Microsteps) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::MicrostepResolution, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read microstep resolution, error: {}", response.GetStatus()); } )) {
				return;
			}
			Tango::DevLong rc = response.PayloadAsInt();
			attr.set_value(&rc);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_Microsteps
}
//--------------------------------------------------------
/**
 *	Write attribute Microsteps related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (MicrostepsEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_Microsteps(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_Microsteps(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	MicrostepsEnum	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_Microsteps) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::SetAxisParemater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::MicrostepResolution, TMCM::Motor(motorId), int32_t(w_val)));
			ValidateResponse(response, [&response](){ return fmt::format("unable to write microstep resolution, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_Microsteps
}
//--------------------------------------------------------
/**
 *	Read attribute RampDivisor related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_RampDivisor(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_RampDivisor(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_RampDivisor) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::RampDivisor, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read ramp divisor, error: {}", response.GetStatus()); } )) {
				return;
			}
			Tango::DevULong rc = response.PayloadAsInt();
			attr.set_value(&rc);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_RampDivisor
}
//--------------------------------------------------------
/**
 *	Write attribute RampDivisor related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_RampDivisor(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_RampDivisor(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_RampDivisor) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::SetAxisParemater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::RampDivisor, TMCM::Motor(motorId), int32_t(w_val)));
			ValidateResponse(response, [&response](){ return fmt::format("unable to write ramp divisor, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_RampDivisor
}
//--------------------------------------------------------
/**
 *	Read attribute PulseDivisor related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_PulseDivisor(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_PulseDivisor(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_PulseDivisor) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::PulseDivisor, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read pulse divisor, error: {}", response.GetStatus()); } )) {
				return;
			}
			Tango::DevULong rc = response.PayloadAsInt();
			attr.set_value(&rc);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_PulseDivisor
}
//--------------------------------------------------------
/**
 *	Write attribute PulseDivisor related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_PulseDivisor(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_PulseDivisor(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_PulseDivisor) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::SetAxisParemater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::PulseDivisor, TMCM::Motor(motorId), int32_t(w_val)));
			ValidateResponse(response, [&response](){ return fmt::format("unable to write pulse divisor, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_PulseDivisor
}
//--------------------------------------------------------
/**
 *	Read attribute StepInterpolation related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_StepInterpolation(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_StepInterpolation(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_StepInterpolation) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_StepInterpolation_read);
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_StepInterpolation
}
//--------------------------------------------------------
/**
 *	Write attribute StepInterpolation related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_StepInterpolation(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_StepInterpolation(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_StepInterpolation) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::SetAxisParemater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::StepInterpolation, TMCM::Motor(motorId), int32_t(w_val)));
			ValidateResponse(response, [&response](){ return fmt::format("unable to write step interpolation, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_StepInterpolation
}
//--------------------------------------------------------
/**
 *	Read attribute FreeWheeling related method
 *	Description: duration untill the motor gets shut down power (0 disables it)
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::read_FreeWheeling(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::read_FreeWheeling(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::read_FreeWheeling) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::FreeWheeling, TMCM::Motor(motorId)));
			if(!ValidateResponse(response, [&response](){ return fmt::format("unable to read freewheeling timeout, error: {}", response.GetStatus()); } ))
			{
				return;
			}
			Tango::DevULong rc = response.PayloadAsInt();
			attr.set_value(&rc);
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::read_FreeWheeling
}
//--------------------------------------------------------
/**
 *	Write attribute FreeWheeling related method
 *	Description: duration untill the motor gets shut down power (0 disables it)
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TMCM_Motor::write_FreeWheeling(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TMCM_Motor::write_FreeWheeling(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TMCM_Motor::write_FreeWheeling) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::SetAxisParemater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::FreeWheeling, TMCM::Motor(motorId), int32_t(w_val)));
			ValidateResponse(response, [&response](){ return fmt::format("unable to write freewheeling timeout, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::write_FreeWheeling
}

//--------------------------------------------------------
/**
 *	Method      : TMCM_Motor::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void TMCM_Motor::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(TMCM_Motor::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its device_state data member) and returns it to the caller.
 *
 *	@returns Device state
 */
//--------------------------------------------------------
Tango::DevState TMCM_Motor::dev_state()
{
	DEBUG_STREAM << "TMCM_Motor::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = get_state();
	if(get_state() == Tango::ON || get_state() == Tango::MOVING) {
		try {
			if(ci) {
				auto cmd = TMCM::Builder::GetAxisParamater(TMCM::Module(moduleId), TMCM::TypeParams::AxisParamaters::Type::PositionReached, TMCM::Motor(motorId));
				auto response = ci->writeRead(cmd);
				if(!ValidateResponse(response, [&response](){ return fmt::format("unable to query motor status, error: {}", response.GetStatus()); } )) {
					argout = Tango::ALARM;
				}
				if(response.PayloadAsInt() == 0) {
					argout = Tango::MOVING;
				}
				else if(response.PayloadAsInt() == 1) {
					argout = Tango::ON;
				}
			}
		} catch(const TMCM::Exception& ex) {
			tangohelpers::TranslateException(ex);
		}
	}

	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		Tango::DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: stopps the motor
 *
 */
//--------------------------------------------------------
void TMCM_Motor::stop()
{
	DEBUG_STREAM << "TMCM_Motor::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::stop) ENABLED START -----*/

	try {
		if(ci) {
			auto response = ci->writeRead(TMCM::Builder::StopMotor(TMCM::Module(moduleId), TMCM::Motor(motorId)));
			ValidateResponse(response, [&response](){ return fmt::format("unable to stop motor, error: {}", response.GetStatus()); } );
		}
	} catch(const TMCM::Exception& ex) {
		tangohelpers::TranslateException(ex);
	}
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::stop
}
//--------------------------------------------------------
/**
 *	Command ClearAlarm related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void TMCM_Motor::clear_alarm()
{
	DEBUG_STREAM << "TMCM_Motor::ClearAlarm()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::clear_alarm) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::clear_alarm
}
//--------------------------------------------------------
/**
 *	Command Calibrate related method
 *	Description: 
 *
 *	@param argin 
 */
//--------------------------------------------------------
void TMCM_Motor::calibrate(Tango::DevLong argin)
{
	DEBUG_STREAM << "TMCM_Motor::Calibrate()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::calibrate) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::calibrate
}
//--------------------------------------------------------
/**
 *	Command Home related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void TMCM_Motor::home()
{
	DEBUG_STREAM << "TMCM_Motor::Home()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TMCM_Motor::home) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::home
}
//--------------------------------------------------------
/**
 *	Method      : TMCM_Motor::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void TMCM_Motor::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(TMCM_Motor::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::add_dynamic_commands
}

/*----- PROTECTED REGION ID(TMCM_Motor::namespace_ending) ENABLED START -----*/

void TMCM_Motor::ChangeState(Tango::DevState newState, const std::string& str)
{
	set_state(newState);
	set_status(str.empty() ? Tango::StatusNotSet : str);
}

/*----- PROTECTED REGION END -----*/	//	TMCM_Motor::namespace_ending
} //	namespace
