/*----- PROTECTED REGION ID(TMCM_Global.h) ENABLED START -----*/
//=============================================================================
//
// file :        TMCM_Global.h
//
// description : Include file for the TMCM_Global class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TMCM_Global_H
#define TMCM_Global_H

#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	TMCM_Global.h

/**
 *  TMCM_Global class description:
 *    
 */

namespace TMCM_Global_ns
{
/*----- PROTECTED REGION ID(TMCM_Global::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	TMCM_Global::Additional Class Declarations

class TMCM_Global : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(TMCM_Global::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	TMCM_Global::Data Members

//	Device property data members
public:
	//	serialPort:	the serial port interface e.g. /dev/ttyUSB0
	string	serialPort;
	//	baudrate:	baudrate of the serial interface
	Tango::DevLong	baudrate;
	//	modules:	the module addresses that are connected.
	//  This has to be set on the module specifically, 
	//  newly created modules always have the id 1 if
	//  not set diffefently. The ID(s) should be written on the 
	//  module box(es).
	vector<Tango::DevLong>	modules;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TMCM_Global(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TMCM_Global(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	TMCM_Global(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~TMCM_Global() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : TMCM_Global::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : TMCM_Global::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:


	//--------------------------------------------------------
	/**
	 *	Method      : TMCM_Global::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(TMCM_Global::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	TMCM_Global::Additional Method prototypes
};

/*----- PROTECTED REGION ID(TMCM_Global::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	TMCM_Global::Additional Classes Definitions

}	//	End of namespace

#endif   //	TMCM_Global_H
